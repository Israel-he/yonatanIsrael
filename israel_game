#pragma once
#include <iostream>
#include "string"
#include "Board.h"
#include "Robot.h"
using namespace std;

class gameControler
{
public:

	gameControler(const std::string& nameFile);
	void setLoc_robot_game();

	void print();      

	void move();
	 
private:
	 
	Board m_board;
	Robot m_robot;
};
--------------------------------------------------
#include "gameControler.h"
#include "gameControler.h"
 
 

gameControler::gameControler(const std::string& nameFile)
	          :m_board(std::string (nameFile)),m_robot(Location(0,0))
{
	setLoc_robot_game();
}

void gameControler::setLoc_robot_game()
{
	m_robot.setLoc_Robot(m_board.getLocOfRobot());
}

void gameControler::print()
{
	
	m_board.printBoard();
	move();
}

void gameControler::move()
{
	int i = 0;
	while (i <10)
	{
		int key = _getch();
		m_robot.move(key);
		i++;
	}

}


------------------------------------------------------
#include "Board.h"
#include <fstream>
#include <iostream>
#include<string>
#include<vector>

#include <thread>
#include <chrono>
//using namespace std::chrono_literals;
using namespace std;
 

 

Board::Board(std::string nameFile)
      :m_board(), m_size(0), m_robot_loc(Location(0, 0))
{
    auto file = std::ifstream(nameFile);
    if (!file.is_open())
    {
        cout << "not working";
        return;
    }
    
    string line;
    while (getline(file, line))
    {
        
        m_board.push_back(line);
        for(int i=0;i< line.size(); i++)
        { 
            if (m_board[m_size][i] == '/')
            {
                setLoOfRobot(Location(m_size, i));
            }
        }
        m_size++;
    }

}

void Board::printBoard()
{
    for (int i = 0; i < m_size; i++)
    {
        cout << m_board[i]<<endl;
    }
}

void Board::setLoOfRobot(Location Loc)
{
    m_robot_loc.col = Loc.col;
    m_robot_loc.row = Loc.row;
}

Location Board::getLocOfRobot()
{
    return m_robot_loc;
}

 

int Board::getSize()
{
    return m_size;
}

--------------------------------------------
#include "Location.h"
#include "iostream"
#include "vector"
#include "string"
 
class Board
{
public:

    Board(std::string nameFile);
    
    void setLoOfRobot(Location Loc);
    Location getLocOfRobot();

    void printBoard();
     
    int getSize();

private:

    Location m_robot_loc;
    int m_size;
    std::vector<std::string>m_board;
};
----------------------------------------------
#include "Location.h"
#include <conio.h> 

class Robot {
public:
    Robot(Location loc);
    Location getLoc_Robot();
    void setLoc_Robot(Location loc);
  
    void move(int key); 
  bool canMove(Location Loc,
    void printSimbol(Location loc,char ch);

private:
    Location currentLocation;
    char symbol='/';
};



/*  גישה לערכים
    Location getCurrentLocation() const;
    char getSymbol() const;*/


   







//
//#pragma once
//#include "Location.h"
//#include  <string>
//class Robot {
//
//public:
//
//	Robot(const Location& startLoc);
//	void GetCuurentLoc(Location cuurentLoc);
//	void printLoc();
//
//private:
//
//	int lives;
//
//	char name='/';
//
//	Location start_loc;
//
//	Location cuurent_loc;
//
//};


//
//
///*Location set_first_loction(std::string fileName);
//Location GetStartLoc();*/
//int Get_live();
//
////void Move(Direction dir);
//void PlaceBomb();
//
//bool CheckIfHit();
//  void DecreaseLife();
//   int GetLifeCount() const;
//
//   bool CheckIfReachedExit();
//
//   void ResetPosition(Location new_loc);
//
//   void AddScore(int points);
//   int GetScore() const;

------------------------------------------
#pragma once
#include "Robot.h"
#include <iostream>
#include "io.h"

Robot::Robot(Location loc)
    : currentLocation(loc) 
{
}

Location Robot::getLoc_Robot()
{
    return (currentLocation);
}

void Robot::setLoc_Robot(Location Loc)
{
    currentLocation.col = Loc.col;
    currentLocation.row = Loc.row;
   
}

void Robot::move(int key)
{
    //int key = _getch(); // קריאת מקש ראשון

    // בדיקה אם מדובר במקש מיוחד (חץ)
    if (key == Keys::SPECIAL_KEY) {
        key = _getch(); // קריאה שנייה לקבלת המקש האמיתי

        switch (key) {
        case SpecialKeys::UP:
            if (canMove())
            {
                printSimbol(currentLocation, ' ');
                currentLocation.row--;
                printSimbol(currentLocation,symbol);
            }
            break;
        case SpecialKeys::DOWN:
            printSimbol(currentLocation, ' ');
            currentLocation.row++;
            break;
        case SpecialKeys::LEFT:
            if (currentLocation.col > 0) currentLocation.col--;
            {
                printSimbol(currentLocation, ' ');
            }
            break;
        case SpecialKeys::RIGHT:
            printSimbol(currentLocation, ' ');
            currentLocation.col++;
            break;
        default:
            break;
        }

        Screen::setLocation(currentLocation); // עדכון מיקום הסמן במסך
    }
    printSimbol(currentLocation, symbol);
}

void Robot::printSimbol(Location loc, char ch)
{
    Screen::setLocation(currentLocation);
    std::cout << ch;
}

 


//Location Robot::getCurrentLocation() const {
//    return currentLocation;
//}
//
//char Robot::getSymbol() const {
//    return symbol;
//}
//
//void Robot::move(char direction, Board& board) {
//     מחיקת מיקום הרובוט הנוכחי
//    board.setCell(currentLocation.col, currentLocation.row, ' ');
//
//     חישוב מיקום חדש
//    int newX = currentLocation.col;
//    int newY = currentLocation.row;
//
//    switch (direction) {
//    case 'w': // למעלה
//        newY = (newY > 0) ? newY - 1 : newY;
//        break;
//    case 's': // למטה
//        newY = (newY < board.getSize() - 1) ? newY + 1 : newY;
//        break;
//    case 'a': // שמאלה
//        newX = (newX > 0) ? newX - 1 : newX;
//        break;
//    case 'd': // ימינה
//        newX = (newX < board.getCell(0, 0).size() - 1) ? newX + 1 : newX;
//        break;
//    }
//
//     עדכון המיקום החדש
//    currentLocation.setLocation(newX, newY);
//
//     הצבת הרובוט במיקום החדש
//    board.setCell(newX, newY, symbol);
//}
//











//
//
//_____________________________________
//#include "Robot.h"
//#include<string>
//#include <fstream>
//#include <iostream>
//using namespace std;
//
//Robot::Robot(const Location& startLoc)
//	:start_loc(startLoc),cuurent_loc(startLoc),lives(5)
//{
//	 
//}
//
//void Robot::GetCuurentLoc(Location cuurentLoc)
//{
//	cuurent_loc.col = cuurentLoc.col ;
//	cuurent_loc.row = cuurentLoc.row;
//	return  Location(cuurent_loc);
//}
//
//void Robot::printLoc()
//
//{
//    cout << cuurent_loc.col << " " << cuurent_loc.row+1;
//}
//	 











//
//
//
//
//
//
//    if (!file.is_open())
//    {
//        cout << "not working";
//        return;
//    }
//    string line;
//    while (getline(file, line))
//    {
//        for (int i = 0; i < line.size(); i++)
//        {
//
//        }
//    }
//
//}
//}
//
// Location Robot::set_first_loction(std::string string)
//{
//	 
//}
//
//Location Robot::GetStartLoc( )
//{
//	return start_loc;
//}
// 
//
//
//
//Robot::Robot(Location start_loc)
//{
//}




------
